apiVersion: v1
kind: ServiceAccount
metadata:
  name: job-aro-gpu-machineset
  namespace: nvidia-gpu-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: job-aws-gpu-machineset
  namespace: nvidia-gpu-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: job-aro-gpu-machineset
rules:
- apiGroups:
  - machine.openshift.io
  resources:
  - machinesets
  verbs:
  - '*'
- apiGroups:
  - autoscaling.openshift.io
  resources:
  - machineautoscalers
  verbs:
  - '*'
- apiGroups:
  - ""
  resourceNames:
  - azure-credentials
  resources:
  - secrets
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: job-aws-gpu-machineset
rules:
- apiGroups:
  - machine.openshift.io
  resources:
  - machinesets
  verbs:
  - '*'
- apiGroups:
  - autoscaling.openshift.io
  resources:
  - machineautoscalers
  verbs:
  - '*'
- apiGroups:
  - ""
  resourceNames:
  - aws-creds
  resources:
  - secrets
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: job-aro-gpu-machineset
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: job-aro-gpu-machineset
subjects:
- kind: ServiceAccount
  name: job-aro-gpu-machineset
  namespace: nvidia-gpu-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: job-aws-gpu-machineset
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: job-aws-gpu-machineset
subjects:
- kind: ServiceAccount
  name: job-aws-gpu-machineset
  namespace: nvidia-gpu-operator
---
apiVersion: v1
data:
  default: 'version: v1'
  time-sliced-2: |-
    version: v1
    sharing:
      timeSlicing:
        resources:
          - name: nvidia.com/gpu
            replicas: 2
  time-sliced-4: |-
    version: v1
    sharing:
      timeSlicing:
        resources:
          - name: nvidia.com/gpu
            replicas: 4
  time-sliced-99: |-
    version: v1
    sharing:
      timeSlicing:
        resources:
          - name: nvidia.com/gpu
            replicas: 99
kind: ConfigMap
metadata:
  name: device-plugin-config
  namespace: nvidia-gpu-operator
---
apiVersion: v1
data:
  job.sh: |
    #!/bin/bash

    # shellcheck disable=SC1091
    . /scripts/ocp.sh

    INSTANCE_TYPE=${INSTANCE_TYPE:-Standard_NC4as_T4_v3}

    ocp_aro_cluster || exit 0
    ocp_aro_machineset_create_gpu "${INSTANCE_TYPE}"
    ocp_machineset_create_autoscale
    # ocp_machineset_taint_gpu
  ocp.sh: |+
    #!/bin/bash
    # shellcheck disable=SC2120

    # See https://github.com/redhat-na-ssa/demo-ai-gitops-catalog
    # FUNCTIONS='
    # ocp_aro_cluster
    # ocp_aro_machineset_create_gpu
    # ocp_aro_machineset_clone_worker
    # ocp_aro_machineset_fix_storage
    # ocp_machineset_create_autoscale
    # ocp_machineset_taint_gpu
    # '

    # for function in ${FUNCTIONS}
    # do
    #   function_extract $function scripts/library/ocp*.sh >> tmp
    #   echo >> tmp
    # done

    ocp_machineset_create_autoscale(){
      MACHINE_MIN=${1:-0}
      MACHINE_MAX=${2:-4}
      MACHINE_SETS=${3:-$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | sed 's@.*/@@' )}

      for machine_set in ${MACHINE_SETS}
      do
    cat << YAML | oc apply -f -
    apiVersion: "autoscaling.openshift.io/v1beta1"
    kind: "MachineAutoscaler"
    metadata:
      name: "${machine_set}"
      namespace: "openshift-machine-api"
    spec:
      minReplicas: ${MACHINE_MIN}
      maxReplicas: ${MACHINE_MAX}
      scaleTargetRef:
        apiVersion: machine.openshift.io/v1beta1
        kind: MachineSet
        name: "${machine_set}"
    YAML
      done
    }

    ocp_machineset_taint_gpu(){
      SHORT_NAME=${1:-g4dn}
      MACHINE_SET=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep "${SHORT_NAME}" | head -n1)

      echo "Patching: ${MACHINE_SET}"

      # taint nodes for gpu-only workloads
      oc -n openshift-machine-api \
        patch "${MACHINE_SET}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"taints":[{"key":"nvidia.com/gpu","value":"","effect":"NoSchedule"}]}}}}'
    }

    ocp_aro_cluster(){
      TARGET_NS=kube-system
      OBJ=secret/azure-credentials
      echo "Checking if ${OBJ} exists in ${TARGET_NS} namespace"
      oc -n "${TARGET_NS}" get "${OBJ}" -o name > /dev/null 2>&1 || return 1
      echo "ARO cluster detected"
    }

    ocp_aro_machineset_create_gpu(){
      # https://learn.microsoft.com/en-us/azure/virtual-machines/sizes/gpu-accelerated/nv-family

      INSTANCE_TYPE=${1:-Standard_NC64as_T4_v3}
      SHORT_NAME=${2:-${INSTANCE_TYPE//_/-}}
      SHORT_NAME=${SHORT_NAME,,}

      ocp_aro_machineset_clone_worker "${INSTANCE_TYPE}"

      MACHINE_SET_TYPE=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep "/${SHORT_NAME}" | head -n1)

      echo "Patching: ${MACHINE_SET_TYPE}"

      # cosmetic
      oc -n openshift-machine-api \
        patch "${MACHINE_SET_TYPE}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"node-role.kubernetes.io/gpu":""}}}}}}'

      # should use the default profile
      # oc -n openshift-machine-api \
      #   patch "${MACHINE_SET_TYPE}" \
      #   --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"nvidia.com/device-plugin.config":"no-time-sliced"}}}}}}'

      # should help auto provisioner
      # oc -n openshift-machine-api \
      #   patch "${MACHINE_SET_TYPE}" \
      #   --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"cluster-api/accelerator":"nvidia-gpu"}}}}}}'

      # oc -n openshift-machine-api \
      #   patch "${MACHINE_SET_TYPE}" \
      #   --type=merge --patch '{"metadata":{"labels":{"cluster-api/accelerator":"nvidia-gpu"}}}'

      oc -n openshift-machine-api \
        patch "${MACHINE_SET_TYPE}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"providerSpec":{"value":{"vmSize":"'"${INSTANCE_TYPE}"'"}}}}}}'
    }

    ocp_aro_machineset_clone_worker(){
      [ -z "${1}" ] && \
      echo "
        usage: ocp_aro_machineset_clone_worker < instance type, default Standard_D4s_v3 > < machine set name >
      "

      INSTANCE_TYPE=${1:-Standard_D4s_v3}
      SHORT_NAME=${2:-${INSTANCE_TYPE//_/-}}
      SHORT_NAME=${SHORT_NAME,,}

      MACHINE_SET_NAME=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep "/${SHORT_NAME}" | head -n1)
      MACHINE_SET_WORKER=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep worker | head -n1)

      # check for an existing instance machine set
      if [ -n "${MACHINE_SET_NAME}" ]; then
        echo "Exists: machineset - ${MACHINE_SET_NAME}"
      else
        echo "Creating: machineset - ${SHORT_NAME}"

        oc -n openshift-machine-api \
          get "${MACHINE_SET_WORKER}" -o yaml | \
            sed '/machine/ s/'"${MACHINE_SET_WORKER##*/}"'/'"${SHORT_NAME}"'/g
              /^  name:/ s/'"${MACHINE_SET_WORKER##*/}"'/'"${SHORT_NAME}"'/g
              /name/ s/'"${MACHINE_SET_WORKER##*/}"'/'"${SHORT_NAME}"'/g
              s/vmSize.*/vmSize: '"${INSTANCE_TYPE}"'/
              /cluster-api-autoscaler/d
              /uid:/d
              /generation:/d
              /resourceVersion:/d
              /creationTimestamp:/d
              s/replicas.*/replicas: 0/' | \
          oc apply -f -

        MACHINE_SET_NAME="machinesets.machine.openshift.io/${SHORT_NAME}"
      fi

      # cosmetic pretty
      oc -n openshift-machine-api \
        patch "${MACHINE_SET_NAME}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"node-role.kubernetes.io/'"${SHORT_NAME}"'":""}}}}}}'
    }




kind: ConfigMap
metadata:
  name: job-aro-gpu-machineset
  namespace: nvidia-gpu-operator
---
apiVersion: v1
data:
  job.sh: |
    #!/bin/bash

    # shellcheck disable=SC1091
    . /scripts/ocp.sh

    INSTANCE_TYPE=${INSTANCE_TYPE:-g4dn.4xlarge}

    ocp_aws_cluster || exit 0
    ocp_aws_machineset_create_gpu "${INSTANCE_TYPE}"
    ocp_machineset_create_autoscale
    ocp_aws_machineset_fix_storage
    # ocp_machineset_taint_gpu
  ocp.sh: |
    #!/bin/bash
    # shellcheck disable=SC2120

    # See https://github.com/redhat-na-ssa/demo-ai-gitops-catalog
    # FUNCTIONS='
    # ocp_aws_cluster
    # ocp_aws_machineset_create_gpu
    # ocp_aws_machineset_clone_worker
    # ocp_aws_machineset_fix_storage
    # ocp_machineset_create_autoscale
    # ocp_machineset_taint_gpu
    # '

    # for function in ${FUNCTIONS}
    # do
    #   function_extract $function scripts/library/ocp*.sh >> tmp
    #   echo >> tmp
    # done

    ocp_aws_cluster(){
      TARGET_NS=kube-system
      OBJ=secret/aws-creds
      echo "Checking if ${OBJ} exists in ${TARGET_NS} namespace"
      oc -n "${TARGET_NS}" get "${OBJ}" -o name > /dev/null 2>&1 || return 1
      echo "AWS cluster detected"
    }

    ocp_aws_machineset_create_gpu(){
      # https://aws.amazon.com/ec2/instance-types/g4
      # single gpu: g4dn.{2,4,8,16}xlarge
      # multi gpu:  g4dn.12xlarge
      # practical:  g4ad.4xlarge
      # a100 (MIG): p4d.24xlarge
      # h100 (MIG): p5.48xlarge

      # https://aws.amazon.com/ec2/instance-types/dl1
      # 8 x gaudi:  dl1.24xlarge

      INSTANCE_TYPE=${1:-g4dn.4xlarge}

      ocp_aws_machineset_clone_worker "${INSTANCE_TYPE}"

      MACHINE_SET_TYPE=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep "${INSTANCE_TYPE%.*}" | head -n1)

      echo "Patching: ${MACHINE_SET_TYPE}"

      # cosmetic
      oc -n openshift-machine-api \
        patch "${MACHINE_SET_TYPE}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"node-role.kubernetes.io/gpu":""}}}}}}'

      # should use the default profile
      # oc -n openshift-machine-api \
      #   patch "${MACHINE_SET_TYPE}" \
      #   --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"nvidia.com/device-plugin.config":"no-time-sliced"}}}}}}'

      # should help auto provisioner
      # oc -n openshift-machine-api \
      #   patch "${MACHINE_SET_TYPE}" \
      #   --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"cluster-api/accelerator":"nvidia-gpu"}}}}}}'

      # oc -n openshift-machine-api \
      #   patch "${MACHINE_SET_TYPE}" \
      #   --type=merge --patch '{"metadata":{"labels":{"cluster-api/accelerator":"nvidia-gpu"}}}'

      oc -n openshift-machine-api \
        patch "${MACHINE_SET_TYPE}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"providerSpec":{"value":{"instanceType":"'"${INSTANCE_TYPE}"'"}}}}}}'

    #  # fix storage

    # cat << YAML > /tmp/patch.yaml
    # spec:
    #   template:
    #     spec:
    #       providerSpec:
    #         value:
    #           blockDevices:
    #             - ebs:
    #                 volumeSize: 120
    #                 volumeType: gp3
    # YAML

    #   oc -n openshift-machine-api \
    #     patch "${MACHINE_SET_TYPE}" \
    #     --type=merge --patch "$(cat /tmp/patch.yaml)"
    }

    ocp_aws_machineset_clone_worker(){
      [ -z "${1}" ] && \
      echo "
        usage: ocp_aws_machineset_clone_worker < instance type, default g4dn.4xlarge > < machine set name >
      "

      INSTANCE_TYPE=${1:-g4dn.4xlarge}
      SHORT_NAME=${2:-${INSTANCE_TYPE/./-}}

      MACHINE_SET_NAME=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep "${SHORT_NAME}" | head -n1)
      MACHINE_SET_WORKER=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep worker | head -n1)

      # check for an existing instance machine set
      if [ -n "${MACHINE_SET_NAME}" ]; then
        echo "Exists: machineset - ${MACHINE_SET_NAME}"
      else
        echo "Creating: machineset - ${SHORT_NAME}"
        oc -n openshift-machine-api \
          get "${MACHINE_SET_WORKER}" -o yaml | \
            sed '/machine/ s/'"${MACHINE_SET_WORKER##*/}"'/'"${SHORT_NAME}"'/g
              /^  name:/ s/'"${MACHINE_SET_WORKER##*/}"'/'"${SHORT_NAME}"'/g
              /name/ s/'"${MACHINE_SET_WORKER##*/}"'/'"${SHORT_NAME}"'/g
              s/instanceType.*/instanceType: '"${INSTANCE_TYPE}"'/
              /cluster-api-autoscaler/d
              /uid:/d
              /generation:/d
              /resourceVersion:/d
              /creationTimestamp:/d
              s/replicas.*/replicas: 0/' | \
          oc apply -f -
      fi

      # fix aws storage
      ocp_aws_machineset_fix_storage "${MACHINE_SET_NAME}"

      # cosmetic pretty
      oc -n openshift-machine-api \
        patch "${MACHINE_SET_NAME}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"metadata":{"labels":{"node-role.kubernetes.io/'"${SHORT_NAME}"'":""}}}}}}'
    }

    ocp_aws_machineset_fix_storage(){
      MACHINE_SETS=${1:-$(oc -n openshift-machine-api get machineset -o name)}
      HD_SIZE=${2:-200}

      for machine_set in ${MACHINE_SETS}
      do
        echo "Patching aws storage for machineset: ${machine_set}"
        oc -n openshift-machine-api \
          get "${machine_set}" -o yaml | \
            sed 's/volumeSize: 100/volumeSize: '"${HD_SIZE}"'/
              s/volumeType: gp2/volumeType: gp3/' | \
          oc apply -f -
      done
    }

    ocp_machineset_create_autoscale(){
      MACHINE_MIN=${1:-0}
      MACHINE_MAX=${2:-4}
      MACHINE_SETS=${3:-$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | sed 's@.*/@@' )}

      for machine_set in ${MACHINE_SETS}
      do
    cat << YAML | oc apply -f -
    apiVersion: "autoscaling.openshift.io/v1beta1"
    kind: "MachineAutoscaler"
    metadata:
      name: "${machine_set}"
      namespace: "openshift-machine-api"
    spec:
      minReplicas: ${MACHINE_MIN}
      maxReplicas: ${MACHINE_MAX}
      scaleTargetRef:
        apiVersion: machine.openshift.io/v1beta1
        kind: MachineSet
        name: "${machine_set}"
    YAML
      done
    }

    ocp_machineset_taint_gpu(){
      SHORT_NAME=${1:-g4dn}
      MACHINE_SET=$(oc -n openshift-machine-api get machinesets.machine.openshift.io -o name | grep "${SHORT_NAME}" | head -n1)

      echo "Patching: ${MACHINE_SET}"

      # taint nodes for gpu-only workloads
      oc -n openshift-machine-api \
        patch "${MACHINE_SET}" \
        --type=merge --patch '{"spec":{"template":{"spec":{"taints":[{"key":"nvidia.com/gpu","value":"","effect":"NoSchedule"}]}}}}'
    }
kind: ConfigMap
metadata:
  name: job-aws-gpu-machineset
  namespace: nvidia-gpu-operator
---
apiVersion: v1
data:
  dcgm-exporter-dashboard.json: |
    {
      "__requires": [
        {
          "type": "panel",
          "id": "gauge",
          "name": "Gauge",
          "version": ""
        },
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.7.3"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "datasource",
          "id": "prometheus",
          "name": "Prometheus",
          "version": "1.0.0"
        }
      ],
      "annotations": {
        "list": [
          {
            "$$hashKey": "object:192",
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "This dashboard is to display the metrics from DCGM Exporter on a Kubernetes (1.19+) cluster",
      "editable": true,
      "gnetId": 12239,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1588401887165,
      "links": [],
      "panels": [
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "$datasource",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 18,
            "x": 0,
            "y": 0
          },
          "hiddenSeries": false,
          "id": 12,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "DCGM_FI_DEV_GPU_TEMP{instance=~\"$instance\", gpu=~\"$gpu\"}",
              "instant": false,
              "interval": "",
              "legendFormat": "GPU {{gpu}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GPU Temperature",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "celsius",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "datasource": "$datasource",
          "gridPos": {
            "h": 8,
            "w": 6,
            "x": 18,
            "y": 0
          },
          "id": 14,
          "options": {
            "fieldOptions": {
              "calcs": [
                "mean"
              ],
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "mappings": [],
                "max": 100,
                "min": 0,
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 83
                    },
                    {
                      "color": "red",
                      "value": 87
                    }
                  ]
                },
                "unit": "celsius"
              },
              "overrides": [],
              "values": false
            },
            "orientation": "auto",
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "6.7.3",
          "targets": [
            {
              "expr": "avg(DCGM_FI_DEV_GPU_TEMP{instance=~\"$instance\", gpu=~\"$gpu\"})",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "GPU Avg. Temp",
          "type": "gauge"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "$datasource",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 18,
            "x": 0,
            "y": 8
          },
          "hiddenSeries": false,
          "id": 10,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pluginVersion": "6.5.2",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "DCGM_FI_DEV_POWER_USAGE{instance=~\"$instance\", gpu=~\"$gpu\"}",
              "interval": "",
              "legendFormat": "GPU {{gpu}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GPU Power Usage",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "watt",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "cacheTimeout": null,
          "datasource": "$datasource",
          "gridPos": {
            "h": 8,
            "w": 6,
            "x": 18,
            "y": 8
          },
          "id": 16,
          "links": [],
          "options": {
            "fieldOptions": {
              "calcs": [
                "sum"
              ],
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "mappings": [],
                "max": 2400,
                "min": 0,
                "nullValueMode": "connected",
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 1800
                    },
                    {
                      "color": "red",
                      "value": 2200
                    }
                  ]
                },
                "unit": "watt"
              },
              "overrides": [],
              "values": false
            },
            "orientation": "horizontal",
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "6.7.3",
          "targets": [
            {
              "expr": "sum(DCGM_FI_DEV_POWER_USAGE{instance=~\"$instance\", gpu=~\"$gpu\"})",
              "instant": true,
              "interval": "",
              "legendFormat": "",
              "range": false,
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "GPU Power Total",
          "type": "gauge"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "$datasource",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 16
          },
          "hiddenSeries": false,
          "id": 2,
          "interval": "",
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": true,
            "show": true,
            "sideWidth": null,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "DCGM_FI_DEV_SM_CLOCK{instance=~\"$instance\", gpu=~\"$gpu\"} * 1000000",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "GPU {{gpu}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GPU SM Clocks",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "hertz",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "$datasource",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 24
          },
          "hiddenSeries": false,
          "id": 6,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "DCGM_FI_DEV_GPU_UTIL{instance=~\"$instance\", gpu=~\"$gpu\"}",
              "interval": "",
              "legendFormat": "GPU {{gpu}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GPU Utilization",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "percent",
              "label": null,
              "logBase": 1,
              "max": "100",
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "$datasource",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 32
          },
          "hiddenSeries": false,
          "id": 18,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "DCGM_FI_DEV_FB_USED{instance=~\"$instance\", gpu=~\"$gpu\"}",
              "interval": "",
              "legendFormat": "GPU {{gpu}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GPU Framebuffer Mem Used",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "decmbytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "$datasource",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 24
          },
          "hiddenSeries": false,
          "id": 4,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "DCGM_FI_PROF_PIPE_TENSOR_ACTIVE{instance=~\"$instance\", gpu=~\"$gpu\"}",
              "interval": "",
              "legendFormat": "GPU {{gpu}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Tensor Core Utilization",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "percentunit",
              "label": null,
              "logBase": 1,
              "max": "1",
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 22,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "current": {
              "selected": true,
              "text": "Prometheus",
              "value": "Prometheus"
            },
            "hide": 0,
            "includeAll": false,
            "multi": false,
            "name": "datasource",
            "options": [],
            "query": "prometheus",
            "queryValue": "",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "type": "datasource"
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "$datasource",
            "definition": "label_values(DCGM_FI_DEV_GPU_TEMP, instance)",
            "hide": 0,
            "includeAll": true,
            "index": -1,
            "label": null,
            "multi": true,
            "name": "instance",
            "options": [],
            "query": "label_values(DCGM_FI_DEV_GPU_TEMP, instance)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "$datasource",
            "definition": "label_values(DCGM_FI_DEV_GPU_TEMP, gpu)",
            "hide": 0,
            "includeAll": true,
            "index": -1,
            "label": null,
            "multi": true,
            "name": "gpu",
            "options": [],
            "query": "label_values(DCGM_FI_DEV_GPU_TEMP, gpu)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-15m",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ]
      },
      "timezone": "",
      "title": "NVIDIA DCGM Exporter Dashboard",
      "uid": "Oxed_c6Wz",
      "variables": {
        "list": []
      },
      "version": 1
    }
kind: ConfigMap
metadata:
  labels:
    console.openshift.io/dashboard: "true"
    console.openshift.io/odc-dashboard: "true"
  name: nvidia-dcgm-exporter-dashboard
  namespace: openshift-config-managed
---
apiVersion: batch/v1
kind: Job
metadata:
  generateName: job-aro-gpu-machineset-
  name: job-aro-gpu-machineset
  namespace: nvidia-gpu-operator
spec:
  template:
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - /scripts/job.sh
        env:
        - name: INSTANCE_TYPE
          value: Standard_NC4as_T4_v3
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: registry.redhat.io/openshift4/ose-cli
        name: job-aro-gpu-machineset
        volumeMounts:
        - mountPath: /scripts
          name: scripts
      restartPolicy: Never
      serviceAccount: job-aro-gpu-machineset
      serviceAccountName: job-aro-gpu-machineset
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 493
          name: job-aro-gpu-machineset
        name: scripts
---
apiVersion: batch/v1
kind: Job
metadata:
  generateName: job-aws-gpu-machineset-
  name: job-aws-gpu-machineset
  namespace: nvidia-gpu-operator
spec:
  template:
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - /scripts/job.sh
        env:
        - name: INSTANCE_TYPE
          value: g4dn.4xlarge
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: registry.redhat.io/openshift4/ose-cli
        name: job-aws-gpu-machineset
        volumeMounts:
        - mountPath: /scripts
          name: scripts
      restartPolicy: Never
      serviceAccount: job-aws-gpu-machineset
      serviceAccountName: job-aws-gpu-machineset
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 493
          name: job-aws-gpu-machineset
        name: scripts
---
apiVersion: monitoring.openshift.io/v1
kind: AlertingRule
metadata:
  name: gpu-pods
  namespace: openshift-monitoring
spec:
  groups:
  - name: gpu-pods
    rules:
    - alert: GpuPods
      annotations:
        description: A total of {{ $value }} 'nvidia.com/gpu' requested on the cluster.
        runbook_url: https://github.com/redhat-na-ssa/demo-ai-gitops-catalog/tree/main/components/operators/gpu-operator-certified/instance/components/gpu-monitoring/gpu-pods.md
        summary: Cloud costs may increase by requesting specialized resources.
      expr: |
        sum (kube_pod_resource_request{resource="nvidia.com/gpu"} >= 1 ) > 0
        # sum by (namespace, pod,resource) (kube_pod_resource_request{resource="nvidia.com/gpu"} >= 1) > 0
      labels:
        severity: info
---
apiVersion: nvidia.com/v1
kind: ClusterPolicy
metadata:
  name: gpu-cluster-policy
  namespace: nvidia-gpu-operator
spec:
  daemonsets:
    rollingUpdate:
      maxUnavailable: "1"
    tolerations:
    - effect: NoSchedule
      key: nvidia.com/gpu
      operator: Exists
    updateStrategy: RollingUpdate
  dcgm:
    enabled: true
  dcgmExporter:
    config:
      name: console-plugin-nvidia-gpu
    enabled: true
    serviceMonitor:
      enabled: true
  devicePlugin:
    config:
      default: time-sliced-2
      name: device-plugin-config
    enabled: true
  driver:
    certConfig:
      name: ""
    enabled: true
    kernelModuleConfig:
      name: ""
    licensingConfig:
      configMapName: ""
      nlsEnabled: false
    repoConfig:
      configMapName: ""
    upgradePolicy:
      autoUpgrade: true
      drain:
        deleteEmptyDir: false
        enable: false
        force: false
        timeoutSeconds: 300
      maxParallelUpgrades: 1
      maxUnavailable: 25%
      podDeletion:
        deleteEmptyDir: false
        force: false
        timeoutSeconds: 300
      waitForCompletion:
        timeoutSeconds: 0
    virtualTopology:
      config: ""
  gds:
    enabled: false
  gfd:
    enabled: true
  mig:
    strategy: single
  migManager:
    enabled: true
  nodeStatusExporter:
    enabled: true
  operator:
    defaultRuntime: crio
    initContainer: {}
    use_ocp_driver_toolkit: true
  sandboxDevicePlugin:
    enabled: true
  sandboxWorkloads:
    defaultWorkload: container
    enabled: false
  toolkit:
    enabled: true
  validator:
    plugin:
      env:
      - name: WITH_WORKLOAD
        value: "true"
  vfioManager:
    enabled: true
  vgpuDeviceManager:
    enabled: true
  vgpuManager:
    enabled: false
